// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider   = "prisma-client-js"
  output     = "../.prisma/client"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

// example table used in the express router example
model HighScore {
  id    Int      @id @default(autoincrement())
  time  DateTime
  score Int
}

// Nodes are all good
model Nodes {
  node_id    String @id
  node_type  String
  floor      String
  x_c        String
  y_c        String
  building   String
  short_name String
  long_name  String

  // Foreign Key Reference
  // flower_delivery_room Flowers[]        @relation("flower_room")
  general_service GeneralService[] @relation("location")
  // medical_device_room  MedicalDevice[]  @relation("medical_device")
}

// Edges are all set
model Edges {
  id         String @id
  end_node   String //@db.VarChar(10)
  start_node String //@db.VarChar(10)
}

// Inventory Delighter table
model Inventory {
  id    Int    @id @default(autoincrement())
  name  String @unique
  type  String
  quant Int
}

// General Service Request Table
model GeneralService {
  id            Int    @id @default(autoincrement())
  type          String
  location      String
  long_name_loc String
  status        String
  emp_name      String
  priority      String

  location_room      Nodes                @relation("location", fields: [location], references: [node_id], onDelete: Cascade)
  medicalDeviceCheck medicalDevice[]      @relation("idCheck")
  lost_location      LostItem[]           @relation("idCheckLost")
  roomSched          RoomScheduler[]      @relation("roomSchedID")
  medicineReqID      MedicineRequest[]    @relation("medicineReqID")
  flowerID           Flowers[]            @relation("flowerID")
  sanitationID       SanitationRequest[]  @relation("sanitationReq")
  maintainID         MaintenanceRequest[] @relation("idCheckMaintain")
  langInterpreterID  langInterpreter[]    @relation("langInterpreterID")
  securityRequests   SecurityRequest[]    @relation("generalServiceRelation")
}

// language interpreter requests are saved
model langInterpreter {
  id           Int     @id
  date         String
  language     String
  modeOfInterp String
  specInstruct String?

  // foreign key reference
  langInterpreterID GeneralService @relation("langInterpreterID", fields: [id], references: [id], onDelete: Cascade)
}

model SanitationRequest {
  id            Int            @id
  severity      String
  hazardous     String
  room_name     String
  // Foreign Key Reference
  sanitationReq GeneralService @relation("sanitationReq", fields: [id], references: [id], onDelete: Cascade)
}

// maintenance requests are saved
model MaintenanceRequest {
  id           Int    @id
  date         String
  maintainType String

  // Foreign Key References
  maintainReq GeneralService @relation("idCheckMaintain", fields: [id], references: [id], onDelete: Cascade)
}

// medical device requests are saved
model medicalDevice {
  id        Int            @id
  device    String
  quantity  Int
  date      String
  room_name String
  idCheck   GeneralService @relation("idCheck", fields: [id], references: [id], onDelete: Cascade)
}

// Lost Item requests are saved
model LostItem {
  id          Int    @id
  date        String
  description String
  type        String

  // Foreign Key References
  lost_location GeneralService @relation("idCheckLost", fields: [id], references: [id], onDelete: Cascade)
}

// room schedulers are saved
model RoomScheduler {
  id        Int    @id
  startTime String
  lengthRes String
  endTime   String
  room_name String

  roomSchedID GeneralService @relation("roomSchedID", fields: [id], references: [id], onDelete: Cascade)
}

model MedicineRequest {
  id            Int            @id
  medicine_name String
  quantity      Int
  room_name     String
  medicineReqID GeneralService @relation("medicineReqID", fields: [id], references: [id], onDelete: Cascade)
}

// Tables for To do list
model User {
  id       String @id
  email    String @unique
  username String @unique
  role     String
  // Foreign Key Reference
  todoList Todo[] @relation("UserID")
  // So each user will have
}

model Todo {
  id          Int       @id @default(autoincrement())
  serv_req_id Int
  task        String
  notes       String
  dueDate     String
  priority    String
  email       String
  complete    Boolean
  subtasks    subTodo[] @relation("idSubtasks")
  // Foreign Key Reference
  user        User      @relation("UserID", fields: [email], references: [email], onDelete: Cascade)
}

model subTodo {
  id          Int     @id @default(autoincrement())
  id_relation Int
  task        String
  complete    Boolean
  // Foreign Key Reference
  parentTask  Todo    @relation("idSubtasks", fields: [id_relation], references: [id], onDelete: Cascade)
}

model Flowers {
  id          Int            @id
  sent_by     String         @db.VarChar(50)
  sent_to     String         @db.VarChar(50)
  requestDate DateTime       @default(now())
  note        String?        @db.VarChar(150)
  room_name   String
  // Foreign Key References
  flowerID    GeneralService @relation("flowerID", fields: [id], references: [id], onDelete: Cascade) // Maybe need to change reference to short_name/long_name later
}

model SecurityRequest {
  id          Int    @id
  date        String
  description String
  type        String

  // Foreign Key References
  generalServiceId        Int
  securityRequestLocation GeneralService @relation("generalServiceRelation", fields: [generalServiceId], references: [id], onDelete: Cascade)
}
