// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider   = "prisma-client-js"
  output     = "../.prisma/client"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

// example table used in the express router example
model HighScore {
  id    Int      @id @default(autoincrement())
  time  DateTime
  score Int
}

// We left HighScore for now because of errors that it is causing

// We have this but don't really need it because we are using auth0 and that handles a lot of stuff
// Users have fields that will be added to the database on registration
// model Staff {
//   emp_id    Int      @id @default(autoincrement())
//   role      String // By default the user will be an employee unless designated otherwise by an admin
//   user_name String
//   // email     String   @unique
//   password  String
//   add_date  DateTime @default(now())
// }

model RoomScheduler {
  id         Int    @id @default(autoincrement())
  employName String
  startTime  String
  lengthRes  String
  roomNum    String
  reqStatus  String
  priority   String

  // sent_room Nodes @relation("send_room", fields: [roomNum], references: [node_id], onDelete: Cascade) // Maybe need to change reference to short_name/long_name later
}

// Flower requests are saved
model Flowers {
  id          Int      @id @default(autoincrement())
  room        String
  name        String
  sent_by     String   @db.VarChar(50)
  sent_to     String   @db.VarChar(50)
  requestDate DateTime @default(now())
  note        String?  @db.VarChar(150)
  status      String // when initialized the field will be 'Pending'. When the order is ready to be delivered it will be called Ready and will display in a SELECT statement

  // Foreign Key References
  sent_room Nodes @relation("flower_room", fields: [room], references: [node_id], onDelete: Cascade) // Maybe need to change reference to short_name/long_name later
}

// Nodes are all good
model Nodes {
  node_id    String @id
  node_type  String
  floor      String
  x_c        String
  y_c        String
  building   String
  short_name String
  long_name  String

  // Foreign Key Reference
  flower_delivery_room Flowers[]        @relation("flower_room")
  general_service      GeneralService[] @relation("location")
  // medical_device_room  MedicalDevice[]  @relation("medical_device")
}

// Edges are all set
model Edges {
  id         String @id
  end_node   String //@db.VarChar(10)
  start_node String //@db.VarChar(10)
}

// Inventory Delighter table
model Inventory {
  id    Int    @id @default(autoincrement())
  name  String @unique
  quant Int
}

// General Service Request Table
model GeneralService {
  id       Int    @id @default(autoincrement())
  type     String
  location String
  status   String
  emp_name String
  priority String

  location_room      Nodes           @relation("location", fields: [location], references: [node_id], onDelete: Cascade)
  MedicalDeviceCheck medicalDevice[] @relation("idCheck")
}

model medicalDevice {
  id        Int            @id
  device    String
  quantity  Int
  date      String
  room_name String
  idCheck   GeneralService @relation("idCheck", fields: [id], references: [id], onDelete: Cascade)
}

// Lost Item requests are saved
model LostItem {
  id            Int     @id
  name          String
  date          String
  description   String
  priority      String
  status        String
  type          String
  location      String

  //Foreign Key References
  lost_location GeneralService @relation("idCheckLost", fields: [id], references: [id], onDelete: Cascade)
}
